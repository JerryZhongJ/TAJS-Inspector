apply plugin: 'java'
apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'idea'

repositories {
    mavenCentral()
}
dependencies {
    implementation group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.6.3'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.8.v20171121'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src_client/gradle_dist']
        }
    }
}

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '1.30.385'
    }
}

// task wrapper(type: Wrapper) {
//     gradleVersion = '3.5'
// }

task generateApiDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    title = 'TAJS Inspector API documentation'
}
generateTypeScript {
    outputFile = 'src_client/src/app/api.d.ts'
    classPatterns = [
            'dk.brics.inspector.api.model.**'
    ]
    customTypeMappings = [
            'dk.brics.inspector.api.model.ids.AbstractID:String',
            'java.nio.file.Path:string'
    ]
    jsonLibrary = 'jackson2'
    outputKind = 'global'
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


task npmInstall(type:Exec) {
    workingDir 'src_client'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        executable = "cmd"
        args = ["/c", "npm", "install"]
    } else {
        commandLine('npm', 'install')
    }
}

task buildAngular(type:Exec) {
    workingDir 'src_client'
    if  (System.properties['os.name'].toLowerCase().contains('windows')) {
        executable = "cmd"
        args = ["/c", 'ng', 'build', '--prod', '--aot', '--output-path', 'gradle_dist\\dk\\brics\\inspector\\client\\standard-js-client']
    } else {
        commandLine('node_modules/@angular/cli/bin/ng', 'build', '--prod', '--aot', '--output-path', 'gradle_dist/dk/brics/inspector/client/standard-js-client')
    }
    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}


buildAngular.dependsOn npmInstall
// comment to speed-up gradle compilation speed 
//compileJava.dependsOn buildAngular